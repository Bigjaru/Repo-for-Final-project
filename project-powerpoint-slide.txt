Presenter discussion:
We have received requirement to produce Application programming interface (API)s for the management of note records within a database and retreival of zipcode details

The requirement calls for the note management API to list, retrieve, create, update, and delete note entries in a database, while it calls for the zipcode API to provide zipcode details from an external API.

PowerPoint Slide:
		The note management API
	- Lists, retrieves, creates, updates, and deletes note entries in a database
		     Zipcode API
	- provides zipcode details from an external API

Presenter discussion:
We have created additional API that provides an external service integration to retrieve zipcode details. At the start, we have incorporated the zipcode API with note management but decided against it when we discovered in the requirement that this api be called with out the "/api/" base path as GET localhost:8081/project1/{zip=somezipcode}:

PowerPoint Slide:
		Design Decision
	- A single API that holds both note management and Zipcode APIs vs.
	- Two APIs: one for the note management API and another one for Zipcode API
	- The reason why we ended up with two APIs
		

As a result, we have ended up with two APIs, one for the note management and another one for zipcode details. 

PowerPoint Slide:
		Discussion of Note management API
	- Discussed what is note and how note is kept- note is text kept in a text file
	- Started out by creating notes in text file 
	- Used Mule "File" function to read when a note text file is created or updated 
	- Read the file attributes "fileName" to be used as "title", "payload" as "content", 	  	  "creationTime" as "createdAt" and "lastModifiedTime" as "updatedAt"
	- 
	
		Problem with using text file as a source of note
	- Unable to detach the file extension (.txt) to use the fileName attribute as "title"
	- Unable to read into the text file payload to extract the subject "Title" or "Contents"
	- "payload" data too big to fit into VARCHAR data types in the database table
	- Difficulty in triggering listing or retrieving and deleting functions in the flow

		Switch to Json file as a source of note
	- Solved all the problems faced with using text file as a source
	- Able to read into the contents of the json file to extract needed items to be used
	- Able to control the size of texts used to fit into the database table
	- Allowed us to use Postman UI to trigger flows and supply json data as inputs for notes	
Presenter discussion:
We have used the contract-first design principle, utilizing RESTful API Modeling Language (RAML) for the API specification, for the note management api and direct coding/implementation for the zipcode api creating flows in Anypoint Studio.
Since we used the RAML we were able to scale, and maintain the note management API design, which we validate it through simulation and consumer feedback mechanisms before implementation. We have gone through several versions to reach the final product we brought to Anypoint Studio for implementation.

We have gone through seven versions or iterations to get to the final product. In the end, we were able to shorten the root file from more than 100 lines to about 20 lines creating Get and Post methods for "/notes" end point and creating Get, Delete and put methods for "/notes/{noteId} end 
point.

 We started with creating the structure of the API that enables us to manage notes in database along with creation of error responses in Traites folder. Then, security parameters like security schemes, and client id and secret are added to the RAML design. On the third iteration, Resources are created and placed in Resources folder. Similarly, remaining responses examples are created and placed in Examples folder. Afterwards, a library folder is created, and library elements are placed in it. Get methods are modularized and placed in the root file.
On the fifth iteration, a realization to integrate or incorporate the external Zipcode API with the project came and this external API was added to the RAML design. On the 6th iteration, further discussion revealed that the requirement on calling the external zipcode API demanded this API be called without the "/api/" base path and it was decided to drop the zipcode API from the notes management API and create a separate project for it. Similarly, it was discovered that the addition of "/api" in the RAML design carried extra base path "/api/* when it was brought to Anypoint Studio with the APIKit Router. At this point, decision was made also to drop the /api/ base path from the RAML design. Finally, further modularization was made and grouped the "/notes" methods in one resource type and "/notes/{noteId}" methods in another resource type to produce the shortened version of the RAML design in the root file. 

PowerPoint Slide:
		Design RAML for note Management API
	- Used contract-first design principle
	- Utilized RAML- RESTful API Modeling Language for the API specification
	- Gone through seven versions or iterations to get to the final product
	- 1st iteration: Created the root file in AP with all endpoints with thier required methods 	   with error responses in a separate Traites folder
	   Created Examples folder and placed get response and post request examples in it 
	- 2nd iteration: added security parameters like security schemes, and client id and secret
	- 3rd iteration: created Resources folder and placed Resources types in it
	- 4th iteration: created remaining responses examples and placed in Examples folder 	   	    Created library folder and placed library elements in it. 
	    modularized Get methods.
	- 5th iteration: integrated or incorporated Zipcode API with the note management API by 	    adding endpoint for it in the RAML design
	- 6th iteration: detached the zipcode API from the notes management API and created a 	   	    separate project for it
	    droped the extra "/api/" base path from the RAML design
	- 7th iteration: further modularized and grouped the "/notes" methods in one resource type 	    and "/notes/{noteId}" methods in another resource type to produce the shortened version 	    of the RAML design in the root file



Presenter discussion:
We then published the final RAML design into AP Exchange. Then, we created APIKit Router in Anypoint Studio by importing the published API from AP Exchange. We have then removed the mock flow components brought with the APIKit Router and replaced them with real world implementation flows and configurations. We created sub flows to match the five implementations: Get and Post for /notes end point and Get, Delete and put for /notes/{noteId} end point. In the subflows, we created Database components to connect and perform CRUD functions with the Database and Table created in MYSQL Database which we manage with MYSQL Workbench.

After the implementation subflows are created and configured, each of them were tested using the Postman UI sending requests and receiving responses in creating, listing, updating or deleting note records in local database table. Once appropriate and valid note records are verified to populate the database table rows and all data management operations can be performed with valid results on the note records, decision was made to deploy the Mule project to cloud hub. Before deploying the Mule project to cloud Hub, a switch was made from local database to cloud based database. A database schema and table was created on the cloud MYSQL database. The necessary configuration changes were made on database connector cofigurations on  the mule project to point to the cloud database. Once connection between mule project and coud databse verified, the project was deployed to cloud hub. After deploying to cloud hub and setting up the cloud database, real/valid note data/records were inserted into the cloud database table and retrieval, updating and deleting of note records were performed successfully which was one of the goal of this final project.

PowerPoint Slide:
			Design Anypoint Studio flows
	- Tested the API behavior by using the API mocking tools and ensured error free API spec
	- Published the RAML API specification from AP Design Center into AP Exchange
	- Created a project for the note API management in Anypoint Studio and imported the published 	  RAML specification from Exchange
	- Created APIKit Router with flows for each endpoint and methods with mock implementations
	- Followed MuleSoft's best practices for configuration by placing connector configurations 	  and error handling configurations in separate Mule configuration files
	- Followed MuleSoft's best practices by renaming the main flow as "interface"  
	- Followed MuleSoft's best practices by creating a package to place all implementation flows
	- Removed the flow components with mock data brought with the APIKit Router and replaced them 	  with real world implementation flows and configurations
	- Created sub flows to match the five implementations: Get and Post for "/notes" end point 	  and Get, Delete and put for "/notes/{noteId}" end point 
	- Create Database and Table in MYSQL Database for note records to be placed and manipulated
	- Created Database components in the sub flows to connect and perform CRUD functions with the 	  Database and Table created in MYSQL Database which we manage with MYSQL Workbench
	- Tested creating, listing, updating and deleting note records in local database table using 	  Postman UI to send requests and receive responses through the flows
	- Verified appropriate and valid note records are populated in the database table rows 
	- Verified all data manipulation operations can be performed with valid results on the note 	  records
	- Set up separate environments for development, testing, and production
	- Implemented environment-specific properties files (Dev, QA, Prod) to manage configuration 	  details for Listner path config, http Listner configs and database connector configs
	- Used encrypted values for sensitive data like database passwords in configuration files by 	  using secure properties configuration
	- 

Presenter discussion:


PowerPoint Slide:
			Deploying to Cloud Hub
	- 


Presenter discussion:
Relating to the second goal of this project, we used direct coding or implementation approach as this task has only single endpoint or resource. We created and configured flow components directly on Anypoint Studio. Http Request was setup to point to the desired external zipcode API. One of the recommended end point "QuickZipCodeDetails" was used in this final project to demonstarte that an external API could be integrated with our API to provide our API functionality available from outside sources like producing zipcode details when a zipcode is entered in our local API. We used the Postman UI to supply a zipcode value as uriParameters to our local API where it passes the zipcode value to the external Zipcode API to fetch detail information about the sayed zipcode. 

PowerPoint Slide:
			Zipcode API
	- 


Lastly, we connected our projects in Anypoint Studio to Git Hub for version control and repository. 


